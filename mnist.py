# -*- coding: utf-8 -*-
"""Mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tLKJi__4jkGywkHdfpKbNjah30BCgIn4
"""

from tensorflow import keras
import tensorflow as tf
from tensorflow.keras.datasets import mnist
import numpy as np
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Conv2D, Dense , Dropout , BatchNormalization , MaxPooling2D
from tensorflow.keras import backend as K
from tensorflow.keras.layers import Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator

(x_train, train_labels),(x_test,test_labels) = mnist.load_data()
img_rows, img_cols = 28, 28

if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

number_of_classes = 10
train_labels = tf.keras.utils.to_categorical(train_labels, number_of_classes)
test_labels = tf.keras.utils.to_categorical(test_labels, number_of_classes)

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   rotation_range = 40,
                                   width_shift_range = 0.2,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   fill_mode = 'nearest')

val_datagen = ImageDataGenerator(rescale = 1./255.0)

train_datagen.fit(x_train)
val_datagen.fit(x_test)

train_iterator = train_datagen.flow(x_train ,train_labels, batch_size=128)
test_iterator = val_datagen.flow(x_test,test_labels, batch_size=128)

model = Sequential()
model.add(Conv2D(32,3, input_shape = (input_shape), kernel_initializer = 'he_normal', padding = 'same',activation = 'relu'))
model.add(MaxPooling2D(2,2))
model.add(tf.keras.layers.BatchNormalization(axis=-1))
model.add(Dropout(0.25))

model.add(Conv2D(64,3, kernel_initializer = 'he_normal', padding = 'same',activation = 'relu'))
model.add(tf.keras.layers.BatchNormalization(axis=-1))
model.add(Conv2D(64,3, kernel_initializer = 'he_normal', padding = 'same',activation = 'relu'))
model.add(tf.keras.layers.BatchNormalization(axis=-1))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.25))

model.add(Conv2D(64,3, kernel_initializer = 'he_normal',  padding = 'same',activation = 'relu'))
model.add(tf.keras.layers.BatchNormalization(axis=-1))
model.add(Conv2D(64,3, kernel_initializer = 'he_normal',  padding = 'same',activation = 'relu'))
model.add(tf.keras.layers.BatchNormalization(axis=-1))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.25))

model.add(Conv2D(128,3, kernel_initializer = 'he_normal',  padding = 'same',activation = 'relu'))
model.add(tf.keras.layers.BatchNormalization(axis=-1))
model.add(Conv2D(128,3, kernel_initializer = 'he_normal',  padding = 'same',activation = 'relu'))
model.add(tf.keras.layers.BatchNormalization(axis=-1))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.25))


model.add(tf.keras.layers.Flatten())
model.add(Dense(512, activation = 'relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Dense(256, activation = 'relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Dense(10 , activation = 'softmax'))

model.compile(loss = 'categorical_crossentropy', optimizer = tf.keras.optimizers.Adam(), metrics = ['accuracy'])

model.fit(train_iterator, epochs=15, validation_data=test_iterator , steps_per_epoch=len(train_iterator))

from google.colab import drive
drive.mount('/content/drive')

model.save('/content/drive/My Drive/mnist')